//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Animations/MovementActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MovementActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MovementActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MovementActions"",
    ""maps"": [
        {
            ""name"": ""Ship"",
            ""id"": ""5ae85091-f10f-45c8-b714-dcbe13f11538"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""35e905a6-7751-403d-92b0-60955b69367c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""10a45e53-c084-4062-abca-825460ffb2eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""6369dc29-610c-46e8-a9a8-c02d6ab65d0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""07b897af-37d0-4bc6-b985-b66eb5db3f28"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateUp"",
                    ""type"": ""Button"",
                    ""id"": ""661a0832-b21b-439d-93e0-eb04d66ec5f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateDown"",
                    ""type"": ""Button"",
                    ""id"": ""46332c97-47ed-43fd-9eb2-ecb3fdbe237f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateAlongZLeft"",
                    ""type"": ""Button"",
                    ""id"": ""80ae6132-1f93-460c-ab25-58d603118fa1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateAlongZRight"",
                    ""type"": ""Button"",
                    ""id"": ""59a75029-c5e4-49c3-ad89-5225e5b70046"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4b9f60ef-37eb-4a8a-a4bd-fc95152b77b3"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0f77964-f241-48cb-a63c-8e21ea090522"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5566531-67a3-467c-9e53-b3d586d2046b"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""231de01d-4a9a-4b32-8ccd-e86e64c47c1c"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14af3159-4637-428d-8c99-598ab09324c3"",
                    ""path"": ""<Keyboard>/#(Q)"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a44b7bc-b0b2-4ca0-8a78-0f6714885bf1"",
                    ""path"": ""<Keyboard>/#(E)"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9a051e2-cf02-4417-bd18-d624c10e4b04"",
                    ""path"": ""<Keyboard>/#(Z)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAlongZLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1d94ef3-97f5-4ea7-b790-5163e84526db"",
                    ""path"": ""<Keyboard>/#(C)"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAlongZRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ship
        m_Ship = asset.FindActionMap("Ship", throwIfNotFound: true);
        m_Ship_Forward = m_Ship.FindAction("Forward", throwIfNotFound: true);
        m_Ship_Back = m_Ship.FindAction("Back", throwIfNotFound: true);
        m_Ship_RotateLeft = m_Ship.FindAction("RotateLeft", throwIfNotFound: true);
        m_Ship_RotateRight = m_Ship.FindAction("RotateRight", throwIfNotFound: true);
        m_Ship_RotateUp = m_Ship.FindAction("RotateUp", throwIfNotFound: true);
        m_Ship_RotateDown = m_Ship.FindAction("RotateDown", throwIfNotFound: true);
        m_Ship_RotateAlongZLeft = m_Ship.FindAction("RotateAlongZLeft", throwIfNotFound: true);
        m_Ship_RotateAlongZRight = m_Ship.FindAction("RotateAlongZRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ship
    private readonly InputActionMap m_Ship;
    private List<IShipActions> m_ShipActionsCallbackInterfaces = new List<IShipActions>();
    private readonly InputAction m_Ship_Forward;
    private readonly InputAction m_Ship_Back;
    private readonly InputAction m_Ship_RotateLeft;
    private readonly InputAction m_Ship_RotateRight;
    private readonly InputAction m_Ship_RotateUp;
    private readonly InputAction m_Ship_RotateDown;
    private readonly InputAction m_Ship_RotateAlongZLeft;
    private readonly InputAction m_Ship_RotateAlongZRight;
    public struct ShipActions
    {
        private @MovementActions m_Wrapper;
        public ShipActions(@MovementActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_Ship_Forward;
        public InputAction @Back => m_Wrapper.m_Ship_Back;
        public InputAction @RotateLeft => m_Wrapper.m_Ship_RotateLeft;
        public InputAction @RotateRight => m_Wrapper.m_Ship_RotateRight;
        public InputAction @RotateUp => m_Wrapper.m_Ship_RotateUp;
        public InputAction @RotateDown => m_Wrapper.m_Ship_RotateDown;
        public InputAction @RotateAlongZLeft => m_Wrapper.m_Ship_RotateAlongZLeft;
        public InputAction @RotateAlongZRight => m_Wrapper.m_Ship_RotateAlongZRight;
        public InputActionMap Get() { return m_Wrapper.m_Ship; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipActions set) { return set.Get(); }
        public void AddCallbacks(IShipActions instance)
        {
            if (instance == null || m_Wrapper.m_ShipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShipActionsCallbackInterfaces.Add(instance);
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @RotateLeft.started += instance.OnRotateLeft;
            @RotateLeft.performed += instance.OnRotateLeft;
            @RotateLeft.canceled += instance.OnRotateLeft;
            @RotateRight.started += instance.OnRotateRight;
            @RotateRight.performed += instance.OnRotateRight;
            @RotateRight.canceled += instance.OnRotateRight;
            @RotateUp.started += instance.OnRotateUp;
            @RotateUp.performed += instance.OnRotateUp;
            @RotateUp.canceled += instance.OnRotateUp;
            @RotateDown.started += instance.OnRotateDown;
            @RotateDown.performed += instance.OnRotateDown;
            @RotateDown.canceled += instance.OnRotateDown;
            @RotateAlongZLeft.started += instance.OnRotateAlongZLeft;
            @RotateAlongZLeft.performed += instance.OnRotateAlongZLeft;
            @RotateAlongZLeft.canceled += instance.OnRotateAlongZLeft;
            @RotateAlongZRight.started += instance.OnRotateAlongZRight;
            @RotateAlongZRight.performed += instance.OnRotateAlongZRight;
            @RotateAlongZRight.canceled += instance.OnRotateAlongZRight;
        }

        private void UnregisterCallbacks(IShipActions instance)
        {
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @RotateLeft.started -= instance.OnRotateLeft;
            @RotateLeft.performed -= instance.OnRotateLeft;
            @RotateLeft.canceled -= instance.OnRotateLeft;
            @RotateRight.started -= instance.OnRotateRight;
            @RotateRight.performed -= instance.OnRotateRight;
            @RotateRight.canceled -= instance.OnRotateRight;
            @RotateUp.started -= instance.OnRotateUp;
            @RotateUp.performed -= instance.OnRotateUp;
            @RotateUp.canceled -= instance.OnRotateUp;
            @RotateDown.started -= instance.OnRotateDown;
            @RotateDown.performed -= instance.OnRotateDown;
            @RotateDown.canceled -= instance.OnRotateDown;
            @RotateAlongZLeft.started -= instance.OnRotateAlongZLeft;
            @RotateAlongZLeft.performed -= instance.OnRotateAlongZLeft;
            @RotateAlongZLeft.canceled -= instance.OnRotateAlongZLeft;
            @RotateAlongZRight.started -= instance.OnRotateAlongZRight;
            @RotateAlongZRight.performed -= instance.OnRotateAlongZRight;
            @RotateAlongZRight.canceled -= instance.OnRotateAlongZRight;
        }

        public void RemoveCallbacks(IShipActions instance)
        {
            if (m_Wrapper.m_ShipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShipActions instance)
        {
            foreach (var item in m_Wrapper.m_ShipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShipActions @Ship => new ShipActions(this);
    public interface IShipActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnRotateLeft(InputAction.CallbackContext context);
        void OnRotateRight(InputAction.CallbackContext context);
        void OnRotateUp(InputAction.CallbackContext context);
        void OnRotateDown(InputAction.CallbackContext context);
        void OnRotateAlongZLeft(InputAction.CallbackContext context);
        void OnRotateAlongZRight(InputAction.CallbackContext context);
    }
}
